
class Multiset:
    def __init__(self):
        self.data = []

    def add(self, val):
        # adds one occurrence of val to the multiset
        self.data.append(val)

    def remove(self, val):
        # removes one occurrence of val from the multiset, if any
        if val in self.data:
            self.data.remove(val)

    def __contains__(self, val):
        # returns True when val is in the multiset, else False
        return val in self.data

    def __len__(self):
        # returns the number of elements in the multiset
        return len(self.data)


if __name__ == '__main__':
    def performOperations(operations):
        m = Multiset()
        result = []
        for op_str in operations:
            elems = op_str.split()
            if elems[0] == 'size':
                result.append(len(m))
            else:
                op, val = elems[0], int(elems[1])
                if op == 'query':
                    result.append(val in m)
                elif op == 'add':
                    m.add(val)
                elif op == 'remove':
                    m.remove(val)
        return result

    # Input handling
    q = int(input())
    operations = [input() for _ in range(q)]

    # Process and output results
    result = performOperations(operations)
    print('\n'.join(map(str, result)))
